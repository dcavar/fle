/**
 * \class CFGRuleParser
 * \file CFGRuleParser.h
 *
 * \brief Provide a parser for CFG rules.
 *
 * The code for this parser is indirectly generated from the specification of the BNF
 * grammar for CFGs and the resulting parser class Skeleton.C generated by BNFC.
 *
 * \author Damir Cavar &lt;damir.cavar@gmail.com&gt;
 *
 * \version 0.2
 *
 * \date 2017/03/21 13:46:00
 *
 * \date Created on: Tue Oct 25 01:55:00 2016
 *
 * \copyright Copyright 2016-2017 by Damir Cavar
 *
 * \license{Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.}
 *
 * \see CFGParserTest
 *
 * \note This code should be considered alpha.
 *
 * \bug None
 */


#ifndef GRAMMARTEST_CFGRULEPARSER_H
#define GRAMMARTEST_CFGRULEPARSER_H


#include <iostream>
#include <fstream>
#include <vector>
#include <limits.h>
#include "Absyn.H"
#include "Parser.H"
#include "../FLEWFST.h"


using namespace std;


namespace cfg {

    enum STypes {
        SYMBOL_TYPE_PLAIN,
        SYMBOL_TYPE_AST,
        SYMBOL_TYPE_PLUS,
        TERMINAL_TYPE_PLAIN,
        TERMINAL_TYPE_AST,
        TERMINAL_TYPE_PLUS,
        SYMBOL_TYPE_OPT,
        SYMBOL_TYPE_DISJUNCTION
    };

    //using namespace cfg;
    class CFGRuleParser : public Visitor {
    public:
        void visitGrammar(Grammar *p);
        void visitRule(Rule *p);
        void visitARROW(ARROW *p);
        void visitLHS(LHS *p);
        void visitDISJSTART(DISJSTART *p);
        void visitDISJSTOP(DISJSTOP *p);
        void visitBRSTART(BRSTART *p);
        void visitBRSTOP(BRSTOP *p);
        void visitCRHS(CRHS *p);
        void visitDRHS(DRHS *p);
        void visitRHS(RHS *p);
        void visitGram(Gram *p);
        void visitRul(Rul *p);
        void visitArrow1(Arrow1 *p);
        void visitArrow2(Arrow2 *p);
        void visitArrow4(Arrow4 *p);
        void visitArrow3(Arrow3 *p);
        void visitERul(ERul *p);
        void visitLhsS(LhsS *p);
        void visitDisjStart(DisjStart *p);
        void visitDisjStop(DisjStop *p);
        void visitBrStart(BrStart *p);
        void visitBrStop(BrStop *p);
        void visitRhsDisj(RhsDisj *p);
        void visitRhsBr(RhsBr *p);
        void visitRhsBrP(RhsBrP *p);
        void visitRhsBrA(RhsBrA *p);
        void visitRhsSym(RhsSym *p);
        void visitRhsDisjSyms(RhsDisjSyms *p);
        void visitRhsSymbol(RhsSymbol *p);
        void visitRhsSymbolP(RhsSymbolP *p);
        void visitRhsSymbolA(RhsSymbolA *p);
        void visitRhsTerminal(RhsTerminal *p);
        void visitRhsEpsilon(RhsEpsilon *p);
        void visitListRule(ListRule *p);
        void visitListRHS(ListRHS *p);
        void visitListCRHS(ListCRHS *p);
        void visitListDRHS(ListDRHS *p);

        void visitInteger(Integer x);
        void visitChar(Char x);
        void visitDouble(Double x);
        void visitString(String x);
        void visitIdent(Ident x);

        /**
         *
         */
        CFGRuleParser(FLEWFST *);

        /**
         *
         */
        ~CFGRuleParser();

        /**
         *
         */
        void getRules(const char *);

        bool verbose;
        /*!< the verbose flag */

        int countRules = 0;
        /*!< number of rules processed */

    private:
        FLEWFST *wfst;
        /*!< the WFST for the grammar */

        int startState;
        /*!< the start state of the WFST */

        int fromState;
        /*!< the state from which new transitions start */

        int targetState;
        /*!< the state to which new transitions go */

        int disjunctionFinalState;
        /*!< the state to which a disjunction group transition goes */

        int disjunctionStartState;
        /*!< the state from which a disjunction group starts */

        vector<int> LHSBuffer;

        bool disjunctionGroup = false;

        bool bracketedGroup = false;

        int groupingStart;

        int oneButLastInGroup;

        int lastSymbol;

        double lastWeight;

    };
}

#endif //GRAMMARTEST_CFGRULEPARSER_H
