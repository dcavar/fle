/**
 * \class XLELexiconParser
 * \file XLELexiconParser.cpp
 *
 * \brief Provide a parser for XLE LEXICON section settings.
 *
 * The code for this parser is indirectly generated from the specification of the BNF
 * grammar for XLE LEXICON and the resulting parser class Skeleton.C generated by BNFC.
 *
 * \author Damir Cavar &lt;dcavar@iu.edu&gt;
 *
 * \version 0.1
 *
 * \date 2016/10/25 01:53:00
 *
 * \date Created on: Tue Oct 25 01:55:00 2016
 *
 * \copyright Copyright 2016 by Damir Cavar
 *
 * \license{Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.}
 *
 * \see XLELexiconParserTest
 *
 * \note This code should be considered alpha.
 *
 * \bug None
 */


#include "XLELexiconParser.h"

using namespace std;

namespace xlelexicon {

    void XLELexiconParser::getConfig(const char *buffer) {
        LEXICON *parse_tree = pLEXICON(buffer);
        if (parse_tree) {
            parse_tree->accept(this);
        }
    }


    void XLELexiconParser::visitLEXICON(LEXICON *t) {} //abstract class
    void XLELexiconParser::visitRULE(RULE *t) {} //abstract class
    void XLELexiconParser::visitRULEDEF(RULEDEF *t) {} //abstract class
    void XLELexiconParser::visitWORD(WORD *t) {} //abstract class
    void XLELexiconParser::visitCAT(CAT *t) {} //abstract class
    void XLELexiconParser::visitMORPHCODE(MORPHCODE *t) {} //abstract class
    void XLELexiconParser::visitSCHEM(SCHEM *t) {} //abstract class
    void XLELexiconParser::visitDISJOINTSCHEMA(DISJOINTSCHEMA *t) {} //abstract class
    void XLELexiconParser::visitDSCHEM(DSCHEM *t) {} //abstract class
    void XLELexiconParser::visitLEFTSCHEMA(LEFTSCHEMA *t) {} //abstract class
    void XLELexiconParser::visitRIGHTSCHEMA(RIGHTSCHEMA *t) {} //abstract class
    void XLELexiconParser::visitTEMPLATEDISJOINTRULE(TEMPLATEDISJOINTRULE *t) {} //abstract class
    void XLELexiconParser::visitTEMPLATERULEORHS(TEMPLATERULEORHS *t) {} //abstract class
    void XLELexiconParser::visitTEMPLATERULE(TEMPLATERULE *t) {} //abstract class
    void XLELexiconParser::visitTEMPLATE(TEMPLATE *t) {} //abstract class
    void XLELexiconParser::visitSYMBOL(SYMBOL *t) {} //abstract class
    void XLELexiconParser::visitUP(UP *t) {} //abstract class
    void XLELexiconParser::visitDOWN(DOWN *t) {} //abstract class
    void XLELexiconParser::visitPLUS(PLUS *t) {} //abstract class

    void XLELexiconParser::visitLexicon(Lexicon *lexicon) {
        /* Code For Lexicon Goes Here */

        lexicon->listrule_->accept(this);

    }

    void XLELexiconParser::visitRuleS(RuleS *rule_s) {
        /* Code For RuleS Goes Here */

        cout << "Visiting XLE Lexicon Rules" << endl;

        rule_s->word_->accept(this);
        rule_s->ruledef_->accept(this);

    }

    void XLELexiconParser::visitRuleS2(RuleS2 *rule_s) {
        /* Code For RuleS2 Goes Here */

        rule_s->ruledef_->accept(this);

    }

    void XLELexiconParser::visitRuleDef(RuleDef *rule_def) {
        /* Code For RuleDef Goes Here */

        rule_def->cat_->accept(this);
        rule_def->morphcode_->accept(this);
        rule_def->listschem_->accept(this);

    }

    void XLELexiconParser::visitRuleDefS(RuleDefS *rule_def_s) {
        /* Code For RuleDefS Goes Here */

        rule_def_s->ruledef_1->accept(this);
        rule_def_s->ruledef_2->accept(this);

    }

    void XLELexiconParser::visitRuleDefSS(RuleDefSS *rule_def_ss) {
        /* Code For RuleDefSS Goes Here */

        rule_def_ss->cat_->accept(this);
        rule_def_ss->morphcode_->accept(this);
        visitWord(rule_def_ss->word_);

    }

    void XLELexiconParser::visitRuleDefSE(RuleDefSE *rule_def_se) {
        /* Code For RuleDefSE Goes Here */

        rule_def_se->cat_->accept(this);
        rule_def_se->morphcode_->accept(this);

    }

    void XLELexiconParser::visitRuleDefSEEtc(RuleDefSEEtc *rule_def_se_etc) {
        /* Code For RuleDefSEEtc Goes Here */


    }

    void XLELexiconParser::visitRuleDefSP(RuleDefSP *rule_def_sp) {
        /* Code For RuleDefSP Goes Here */

        rule_def_sp->listmorphcode_1->accept(this);
        visitWord(rule_def_sp->word_);
        rule_def_sp->listmorphcode_2->accept(this);

    }

    void XLELexiconParser::visitRuleDefSP2(RuleDefSP2 *rule_def_sp) {
        /* Code For RuleDefSP2 Goes Here */

        rule_def_sp->listmorphcode_1->accept(this);
        visitWord(rule_def_sp->word_);
        rule_def_sp->listmorphcode_2->accept(this);
        rule_def_sp->schem_->accept(this);

    }

    void XLELexiconParser::visitWordS(WordS *word_s) {
        /* Code For WordS Goes Here */

        visitWord(word_s->word_);

    }

    void XLELexiconParser::visitWordSP(WordSP *word_sp) {
        /* Code For WordSP Goes Here */

        visitWord(word_sp->word_);

    }

    void XLELexiconParser::visitWordSPP(WordSPP *word_spp) {
        /* Code For WordSPP Goes Here */

        visitWord(word_spp->word_);

    }

    void XLELexiconParser::visitWordSPAP(WordSPAP *word_spap) {
        /* Code For WordSPAP Goes Here */

        visitWord(word_spap->word_1);
        visitWord(word_spap->word_2);

    }

    void XLELexiconParser::visitWordSDP(WordSDP *word_sdp) {
        /* Code For WordSDP Goes Here */

        visitWord(word_sdp->word_);

    }

    void XLELexiconParser::visitCatS(CatS *cat_s) {
        /* Code For CatS Goes Here */

        visitWord(cat_s->word_);

    }

    void XLELexiconParser::visitCatSE(CatSE *cat_se) {
        /* Code For CatSE Goes Here */

        visitWord(cat_se->word_);

    }

    void XLELexiconParser::visitCatP(CatP *cat_p) {
        /* Code For CatP Goes Here */

        visitWord(cat_p->word_);

    }

    void XLELexiconParser::visitCatPS(CatPS *cat_ps) {
        /* Code For CatPS Goes Here */

        visitWord(cat_ps->word_);

    }

    void XLELexiconParser::visitMorphcodeS(MorphcodeS *morphcode_s) {
        /* Code For MorphcodeS Goes Here */


    }

    void XLELexiconParser::visitMorphcodeX(MorphcodeX *morphcode_x) {
        /* Code For MorphcodeX Goes Here */


    }

    void XLELexiconParser::visitMorphcodePQM(MorphcodePQM *morphcode_pqm) {
        /* Code For MorphcodePQM Goes Here */


    }

    void XLELexiconParser::visitMorphcodePC(MorphcodePC *morphcode_pc) {
        /* Code For MorphcodePC Goes Here */


    }

    void XLELexiconParser::visitMorphcodeSC(MorphcodeSC *morphcode_sc) {
        /* Code For MorphcodeSC Goes Here */


    }

    void XLELexiconParser::visitMorphcodePQD(MorphcodePQD *morphcode_pqd) {
        /* Code For MorphcodePQD Goes Here */


    }

    void XLELexiconParser::visitMorphcodePQC(MorphcodePQC *morphcode_pqc) {
        /* Code For MorphcodePQC Goes Here */


    }

    void XLELexiconParser::visitMorphcodePSQ(MorphcodePSQ *morphcode_psq) {
        /* Code For MorphcodePSQ Goes Here */


    }

    void XLELexiconParser::visitMorphcodePSQB(MorphcodePSQB *morphcode_psqb) {
        /* Code For MorphcodePSQB Goes Here */


    }

    void XLELexiconParser::visitMorphcodePSQBR(MorphcodePSQBR *morphcode_psqbr) {
        /* Code For MorphcodePSQBR Goes Here */


    }

    void XLELexiconParser::visitSchema(Schema *schema) {
        /* Code For Schema Goes Here */

        schema->leftschema_->accept(this);
        schema->rightschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaB(SchemaB *schema_b) {
        /* Code For SchemaB Goes Here */

        schema_b->listleftschema_->accept(this);
        schema_b->listrightschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaC(SchemaC *schema_c) {
        /* Code For SchemaC Goes Here */

        schema_c->leftschema_->accept(this);
        schema_c->rightschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaD(SchemaD *schema_d) {
        /* Code For SchemaD Goes Here */

        schema_d->leftschema_->accept(this);
        schema_d->rightschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaNegD(SchemaNegD *schema_neg_d) {
        /* Code For SchemaNegD Goes Here */

        schema_neg_d->leftschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaTemplate(SchemaTemplate *schema_template) {
        /* Code For SchemaTemplate Goes Here */

        schema_template->templaterule_->accept(this);

    }

    void XLELexiconParser::visitSchemaDolOpt(SchemaDolOpt *schema_dol_opt) {
        /* Code For SchemaDolOpt Goes Here */

        schema_dol_opt->leftschema_->accept(this);
        schema_dol_opt->listsymbol_->accept(this);

    }

    void XLELexiconParser::visitSchemaDolOptA(SchemaDolOptA *schema_dol_opt_a) {
        /* Code For SchemaDolOptA Goes Here */

        schema_dol_opt_a->leftschema_->accept(this);
        schema_dol_opt_a->rightschema_->accept(this);

    }

    void XLELexiconParser::visitSchemaTemplateDisjoint(SchemaTemplateDisjoint *schema_template_disjoint) {
        /* Code For SchemaTemplateDisjoint Goes Here */

        schema_template_disjoint->templatedisjointrule_->accept(this);

    }

    void XLELexiconParser::visitSchemaDisjoint(SchemaDisjoint *schema_disjoint) {
        /* Code For SchemaDisjoint Goes Here */

        schema_disjoint->listdisjointschema_->accept(this);

    }

    void XLELexiconParser::visitDisjSchema(DisjSchema *disj_schema) {
        /* Code For DisjSchema Goes Here */

        disj_schema->listdschem_->accept(this);

    }

    void XLELexiconParser::visitDSchem(DSchem *d_schem) {
        /* Code For DSchem Goes Here */

        d_schem->leftschema_->accept(this);
        d_schem->rightschema_->accept(this);

    }

    void XLELexiconParser::visitDSchemB(DSchemB *d_schem_b) {
        /* Code For DSchemB Goes Here */

        d_schem_b->leftschema_->accept(this);
        d_schem_b->rightschema_->accept(this);

    }

    void XLELexiconParser::visitDSchemE(DSchemE *d_schem_e) {
        /* Code For DSchemE Goes Here */

        d_schem_e->leftschema_->accept(this);
        d_schem_e->rightschema_->accept(this);

    }

    void XLELexiconParser::visitDSchemC(DSchemC *d_schem_c) {
        /* Code For DSchemC Goes Here */

        d_schem_c->up_->accept(this);
        d_schem_c->symbol_->accept(this);

    }

    void XLELexiconParser::visitDSchemD(DSchemD *d_schem_d) {
        /* Code For DSchemD Goes Here */

        d_schem_d->down_->accept(this);
        d_schem_d->symbol_->accept(this);

    }

    void XLELexiconParser::visitLSchemaUP(LSchemaUP *l_schema_up) {
        /* Code For LSchemaUP Goes Here */

        l_schema_up->up_->accept(this);

    }

    void XLELexiconParser::visitLSchemaDOWN(LSchemaDOWN *l_schema_down) {
        /* Code For LSchemaDOWN Goes Here */

        l_schema_down->down_->accept(this);

    }

    void XLELexiconParser::visitLSchemaUpSymbol(LSchemaUpSymbol *l_schema_up_symbol) {
        /* Code For LSchemaUpSymbol Goes Here */

        l_schema_up_symbol->up_->accept(this);
        l_schema_up_symbol->symbol_->accept(this);

    }

    void XLELexiconParser::visitLSchemaUpSymbolD(LSchemaUpSymbolD *l_schema_up_symbol_d) {
        /* Code For LSchemaUpSymbolD Goes Here */

        l_schema_up_symbol_d->up_->accept(this);
        l_schema_up_symbol_d->symbol_1->accept(this);
        l_schema_up_symbol_d->symbol_2->accept(this);

    }

    void XLELexiconParser::visitLSchemaUpSymbolT(LSchemaUpSymbolT *l_schema_up_symbol_t) {
        /* Code For LSchemaUpSymbolT Goes Here */

        l_schema_up_symbol_t->up_->accept(this);
        l_schema_up_symbol_t->symbol_1->accept(this);
        l_schema_up_symbol_t->symbol_2->accept(this);
        l_schema_up_symbol_t->symbol_3->accept(this);

    }

    void XLELexiconParser::visitLSchemaUpSymbolT2(LSchemaUpSymbolT2 *l_schema_up_symbol_t) {
        /* Code For LSchemaUpSymbolT2 Goes Here */

        l_schema_up_symbol_t->up_->accept(this);
        l_schema_up_symbol_t->symbol_1->accept(this);
        l_schema_up_symbol_t->symbol_2->accept(this);
        l_schema_up_symbol_t->symbol_3->accept(this);
        l_schema_up_symbol_t->symbol_4->accept(this);

    }

    void XLELexiconParser::visitLSchemaDownSymbol(LSchemaDownSymbol *l_schema_down_symbol) {
        /* Code For LSchemaDownSymbol Goes Here */

        l_schema_down_symbol->down_->accept(this);
        l_schema_down_symbol->symbol_->accept(this);

    }

    void XLELexiconParser::visitLSchemaPWord(LSchemaPWord *l_schema_p_word) {
        /* Code For LSchemaPWord Goes Here */

        visitWord(l_schema_p_word->word_);

    }

    void XLELexiconParser::visitLSchemaPWordB(LSchemaPWordB *l_schema_p_word_b) {
        /* Code For LSchemaPWordB Goes Here */

        l_schema_p_word_b->symbol_1->accept(this);
        l_schema_p_word_b->symbol_2->accept(this);

    }

    void XLELexiconParser::visitLSchemaPWordBD(LSchemaPWordBD *l_schema_p_word_bd) {
        /* Code For LSchemaPWordBD Goes Here */

        l_schema_p_word_bd->symbol_1->accept(this);
        l_schema_p_word_bd->symbol_2->accept(this);
        l_schema_p_word_bd->symbol_3->accept(this);

    }

    void XLELexiconParser::visitLSchemaPWordBD2(LSchemaPWordBD2 *l_schema_p_word_bd) {
        /* Code For LSchemaPWordBD2 Goes Here */

        l_schema_p_word_bd->symbol_1->accept(this);
        l_schema_p_word_bd->symbol_2->accept(this);
        l_schema_p_word_bd->symbol_3->accept(this);
        l_schema_p_word_bd->symbol_4->accept(this);

    }

    void XLELexiconParser::visitRSchemaSymbol(RSchemaSymbol *r_schema_symbol) {
        /* Code For RSchemaSymbol Goes Here */

        r_schema_symbol->symbol_->accept(this);

    }

    void XLELexiconParser::visitRSchemaSymbolE(RSchemaSymbolE *r_schema_symbol_e) {
        /* Code For RSchemaSymbolE Goes Here */

        r_schema_symbol_e->symbol_->accept(this);

    }

    void XLELexiconParser::visitRSchemaDown(RSchemaDown *r_schema_down) {
        /* Code For RSchemaDown Goes Here */

        r_schema_down->down_->accept(this);

    }

    void XLELexiconParser::visitRSchemaUpS(RSchemaUpS *r_schema_up_s) {
        /* Code For RSchemaUpS Goes Here */

        r_schema_up_s->up_->accept(this);
        r_schema_up_s->symbol_->accept(this);

    }

    void XLELexiconParser::visitRschemaP(RschemaP *rschema_p) {
        /* Code For RschemaP Goes Here */


    }

    void XLELexiconParser::visitRschemaM(RschemaM *rschema_m) {
        /* Code For RschemaM Goes Here */


    }

    void XLELexiconParser::visitRschemaStem(RschemaStem *rschema_stem) {
        /* Code For RschemaStem Goes Here */


    }

    void XLELexiconParser::visitTemlateDisjointRule(TemlateDisjointRule *temlate_disjoint_rule) {
        /* Code For TemlateDisjointRule Goes Here */

        temlate_disjoint_rule->listtemplateruleorhs_->accept(this);

    }

    void XLELexiconParser::visitTemlateDisjointRuleA(TemlateDisjointRuleA *temlate_disjoint_rule_a) {
        /* Code For TemlateDisjointRuleA Goes Here */

        temlate_disjoint_rule_a->listtemplateruleorhs_1->accept(this);
        temlate_disjoint_rule_a->listtemplateruleorhs_2->accept(this);

    }

    void XLELexiconParser::visitTemplateORRule(TemplateORRule *template_or_rule) {
        /* Code For TemplateORRule Goes Here */

        template_or_rule->listtemplaterule_->accept(this);

    }

    void XLELexiconParser::visitTemplateSingleRule(TemplateSingleRule *template_single_rule) {
        /* Code For TemplateSingleRule Goes Here */

        template_single_rule->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRule(TemplateRule *template_rule) {
        /* Code For TemplateRule Goes Here */

        template_rule->template_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRB(TemplateRuleRB *template_rule_rb) {
        /* Code For TemplateRuleRB Goes Here */

        template_rule_rb->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBP(TemplateRuleRBP *template_rule_rbp) {
        /* Code For TemplateRuleRBP Goes Here */

        template_rule_rbp->symbol_1->accept(this);
        template_rule_rbp->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBM(TemplateRuleRBM *template_rule_rbm) {
        /* Code For TemplateRuleRBM Goes Here */

        template_rule_rbm->symbol_1->accept(this);
        template_rule_rbm->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBPerc(TemplateRuleRBPerc *template_rule_rb_perc) {
        /* Code For TemplateRuleRBPerc Goes Here */

        template_rule_rb_perc->symbol_1->accept(this);
        template_rule_rb_perc->symbol_2->accept(this);
        template_rule_rb_perc->symbol_3->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBPercS(TemplateRuleRBPercS *template_rule_rb_perc_s) {
        /* Code For TemplateRuleRBPercS Goes Here */

        template_rule_rb_perc_s->symbol_1->accept(this);
        template_rule_rb_perc_s->up_->accept(this);
        template_rule_rb_perc_s->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBPercSS(TemplateRuleRBPercSS *template_rule_rb_perc_ss) {
        /* Code For TemplateRuleRBPercSS Goes Here */

        template_rule_rb_perc_ss->symbol_1->accept(this);
        template_rule_rb_perc_ss->up_->accept(this);
        template_rule_rb_perc_ss->symbol_2->accept(this);
        template_rule_rb_perc_ss->symbol_3->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBPercSSU(TemplateRuleRBPercSSU *template_rule_rb_perc_ssu) {
        /* Code For TemplateRuleRBPercSSU Goes Here */

        template_rule_rb_perc_ssu->symbol_1->accept(this);
        template_rule_rb_perc_ssu->up_->accept(this);
        template_rule_rb_perc_ssu->symbol_2->accept(this);
        template_rule_rb_perc_ssu->symbol_3->accept(this);
        template_rule_rb_perc_ssu->symbol_4->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBPercSSS(TemplateRuleRBPercSSS *template_rule_rb_perc_sss) {
        /* Code For TemplateRuleRBPercSSS Goes Here */

        template_rule_rb_perc_sss->symbol_1->accept(this);
        template_rule_rb_perc_sss->up_->accept(this);
        template_rule_rb_perc_sss->symbol_2->accept(this);
        template_rule_rb_perc_sss->symbol_3->accept(this);
        template_rule_rb_perc_sss->symbol_4->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBA(TemplateRuleRBA *template_rule_rba) {
        /* Code For TemplateRuleRBA Goes Here */

        template_rule_rba->symbol_1->accept(this);
        template_rule_rba->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBDisj(TemplateRuleRBDisj *template_rule_rb_disj) {
        /* Code For TemplateRuleRBDisj Goes Here */

        template_rule_rb_disj->symbol_->accept(this);
        template_rule_rb_disj->listtemplateruleorhs_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBB(TemplateRuleRBB *template_rule_rbb) {
        /* Code For TemplateRuleRBB Goes Here */

        template_rule_rbb->up_->accept(this);
        template_rule_rbb->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleRBGENS(TemplateRuleRBGENS *template_rule_rbgens) {
        /* Code For TemplateRuleRBGENS Goes Here */

        template_rule_rbgens->up_->accept(this);
        template_rule_rbgens->symbol_1->accept(this);
        template_rule_rbgens->symbol_2->accept(this);
        template_rule_rbgens->symbol_3->accept(this);
        template_rule_rbgens->symbol_4->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleVoice(TemplateRuleVoice *template_rule_voice) {
        /* Code For TemplateRuleVoice Goes Here */

        template_rule_voice->up_->accept(this);
        template_rule_voice->symbol_1->accept(this);
        template_rule_voice->symbol_2->accept(this);
        template_rule_voice->symbol_3->accept(this);
        template_rule_voice->plus_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleExcep(TemplateRuleExcep *template_rule_excep) {
        /* Code For TemplateRuleExcep Goes Here */

        template_rule_excep->up_->accept(this);
        template_rule_excep->symbol_1->accept(this);
        template_rule_excep->symbol_2->accept(this);
        template_rule_excep->symbol_3->accept(this);
        template_rule_excep->plus_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleExcep2(TemplateRuleExcep2 *template_rule_excep) {
        /* Code For TemplateRuleExcep2 Goes Here */

        template_rule_excep->up_->accept(this);
        template_rule_excep->symbol_1->accept(this);
        template_rule_excep->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleS(TemplateRuleS *template_rule_s) {
        /* Code For TemplateRuleS Goes Here */

        template_rule_s->symbol_1->accept(this);
        template_rule_s->symbol_2->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleSP(TemplateRuleSP *template_rule_sp) {
        /* Code For TemplateRuleSP Goes Here */

        template_rule_sp->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleSM(TemplateRuleSM *template_rule_sm) {
        /* Code For TemplateRuleSM Goes Here */

        template_rule_sm->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleST(TemplateRuleST *template_rule_st) {
        /* Code For TemplateRuleST Goes Here */

        template_rule_st->symbol_1->accept(this);
        template_rule_st->symbol_2->accept(this);
        template_rule_st->symbol_3->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleSST(TemplateRuleSST *template_rule_sst) {
        /* Code For TemplateRuleSST Goes Here */

        template_rule_sst->symbol_1->accept(this);
        template_rule_sst->symbol_2->accept(this);
        template_rule_sst->symbol_3->accept(this);
        template_rule_sst->symbol_4->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleX(TemplateRuleX *template_rule_x) {
        /* Code For TemplateRuleX Goes Here */

        template_rule_x->symbol_->accept(this);

    }

    void XLELexiconParser::visitTemplateRuleXS(TemplateRuleXS *template_rule_xs) {
        /* Code For TemplateRuleXS Goes Here */

        template_rule_xs->symbol_1->accept(this);
        template_rule_xs->symbol_2->accept(this);

    }

    void XLELexiconParser::visitSymbol(Symbol *symbol) {
        /* Code For Symbol Goes Here */

        visitWord(symbol->word_);

    }

    void XLELexiconParser::visitUp(Up *up) {
        /* Code For Up Goes Here */


    }

    void XLELexiconParser::visitDown(Down *down) {
        /* Code For Down Goes Here */


    }

    void XLELexiconParser::visitPlus(Plus *plus) {
        /* Code For Plus Goes Here */


    }


    void XLELexiconParser::visitListRULE(ListRULE *list_rule) {
        for (ListRULE::iterator i = list_rule->begin(); i != list_rule->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListMORPHCODE(ListMORPHCODE *list_morphcode) {
        for (ListMORPHCODE::iterator i = list_morphcode->begin(); i != list_morphcode->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListDISJOINTSCHEMA(ListDISJOINTSCHEMA *list_disjointschema) {
        for (ListDISJOINTSCHEMA::iterator i = list_disjointschema->begin(); i != list_disjointschema->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListDSCHEM(ListDSCHEM *list_dschem) {
        for (ListDSCHEM::iterator i = list_dschem->begin(); i != list_dschem->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListWORD(ListWORD *list_word) {
        for (ListWORD::iterator i = list_word->begin(); i != list_word->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListCAT(ListCAT *list_cat) {
        for (ListCAT::iterator i = list_cat->begin(); i != list_cat->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListSCHEM(ListSCHEM *list_schem) {
        for (ListSCHEM::iterator i = list_schem->begin(); i != list_schem->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListLEFTSCHEMA(ListLEFTSCHEMA *list_leftschema) {
        for (ListLEFTSCHEMA::iterator i = list_leftschema->begin(); i != list_leftschema->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListRIGHTSCHEMA(ListRIGHTSCHEMA *list_rightschema) {
        for (ListRIGHTSCHEMA::iterator i = list_rightschema->begin(); i != list_rightschema->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListTEMPLATERULEORHS(ListTEMPLATERULEORHS *list_templateruleorhs) {
        for (ListTEMPLATERULEORHS::iterator i = list_templateruleorhs->begin();
             i != list_templateruleorhs->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListTEMPLATERULE(ListTEMPLATERULE *list_templaterule) {
        for (ListTEMPLATERULE::iterator i = list_templaterule->begin(); i != list_templaterule->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListSYMBOL(ListSYMBOL *list_symbol) {
        for (ListSYMBOL::iterator i = list_symbol->begin(); i != list_symbol->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListUP(ListUP *list_up) {
        for (ListUP::iterator i = list_up->begin(); i != list_up->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListDOWN(ListDOWN *list_down) {
        for (ListDOWN::iterator i = list_down->begin(); i != list_down->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void XLELexiconParser::visitListPLUS(ListPLUS *list_plus) {
        for (ListPLUS::iterator i = list_plus->begin(); i != list_plus->end(); ++i) {
            (*i)->accept(this);
        }
    }


    void XLELexiconParser::visitWord(Word x) {
        /* Code for Word Goes Here */
    }

    void XLELexiconParser::visitInteger(Integer x) {
        /* Code for Integer Goes Here */
    }

    void XLELexiconParser::visitChar(Char x) {
        /* Code for Char Goes Here */
    }

    void XLELexiconParser::visitDouble(Double x) {
        /* Code for Double Goes Here */
    }

    void XLELexiconParser::visitString(String x) {
        /* Code for String Goes Here */
    }

    void XLELexiconParser::visitIdent(Ident x) {
        /* Code for Ident Goes Here */
    }

}
