/**
 * \class PCFGRuleParser
 * \file PCFGRuleParser.cpp
 *
 * \brief Provide a parser for PCFG rules.
 *
 * The code for this parser is indirectly generated from the specification of the BNF
 * grammar for PCFGs and the resulting parser class Skeleton.C generated by BNFC.
 *
 * \author Damir Cavar &lt;damir.cavar@gmail.com&gt;
 *
 * \version 0.1
 *
 * \date 2016/10/25 01:53:00
 *
 * \date Created on: Tue Oct 25 01:55:00 2016
 *
 * \copyright Copyright 2016 by Damir Cavar
 *
 * \license{Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.}
 *
 * \see PCFGParserTest
 *
 * \note This code should be considered alpha.
 *
 * \bug None
 */


#include "PCFGRuleParser.h"


namespace pcfg {

    void PCFGRuleParser::getRules(const char *str) { // }, FLEWFST &newFST) {
        if (verbose)
            cout << "Parsing rule." << endl;
        // myFST = &newFST;
        //myLHS = myFST->FLEEPSILON; /*!< ID of the last state in myFST */
        //lastState = myFST->start_state;
        //lastTransition = make_pair(make_pair((unsigned long)0, (unsigned long)0), make_tuple((unsigned long)0, (unsigned long)0, (double)0.0));

        // change the returned type or the way it is constructed!
        // TODO
        Grammar *parse_tree = pGrammar(str);
        if (parse_tree) {
            parse_tree->accept(this);
        }
    }

    void PCFGRuleParser::visitGrammar(Grammar *t) {} //abstract class
    void PCFGRuleParser::visitRule(Rule *t) {} //abstract class
    void PCFGRuleParser::visitLHS(LHS *t) {} //abstract class
    void PCFGRuleParser::visitProb(Prob *t) {} //abstract class
    void PCFGRuleParser::visitDRHS(DRHS *t) {} //abstract class
    void PCFGRuleParser::visitRHS(RHS *t) {} //abstract class
    void PCFGRuleParser::visitBRHS(BRHS *t) {} //abstract class

    void PCFGRuleParser::visitGram(Gram *gram) {
        /* Code For Gram Goes Here */

        gram->listrule_->accept(this);

    }

    void PCFGRuleParser::visitRul(Rul *rul) {
        /* Code For Rul Goes Here */

        rul->prob_->accept(this);
        rul->lhs_->accept(this);
        rul->listrhs_->accept(this);

    }

    void PCFGRuleParser::visitERul(ERul *erul) {
        /* Code For ERul Goes Here */


    }

    void PCFGRuleParser::visitLhsS(LhsS *lhss) {
        /* Code For LhsS Goes Here */

        visitIdent(lhss->ident_);

    }

    void PCFGRuleParser::visitProbS(ProbS *probs) {
        /* Code For ProbS Goes Here */

        visitDouble(probs->double_);

    }

    void PCFGRuleParser::visitRhsDisjSyms(RhsDisjSyms *rhsdisjsyms) {
        /* Code For RhsDisjSyms Goes Here */

        visitIdent(rhsdisjsyms->ident_);

    }

    void PCFGRuleParser::visitRhsDisjSymsP(RhsDisjSymsP *rhsdisjsymsp) {
        /* Code For RhsDisjSymsP Goes Here */

        visitIdent(rhsdisjsymsp->ident_);

    }

    void PCFGRuleParser::visitRhsDisjSymsA(RhsDisjSymsA *rhsdisjsymsa) {
        /* Code For RhsDisjSymsA Goes Here */

        visitIdent(rhsdisjsymsa->ident_);

    }

    void PCFGRuleParser::visitRhsDisjTerminal(RhsDisjTerminal *rhsdisjterminal) {
        /* Code For RhsDisjTerminal Goes Here */

        visitString(rhsdisjterminal->string_);

    }

    void PCFGRuleParser::visitRhsDisj(RhsDisj *rhsdisj) {
        /* Code For RhsDisj Goes Here */

        rhsdisj->listdrhs_->accept(this);

    }

    void PCFGRuleParser::visitRhsSymbol(RhsSymbol *rhssymbol) {
        /* Code For RhsSymbol Goes Here */

        visitIdent(rhssymbol->ident_);

    }

    void PCFGRuleParser::visitRhsSymbolP(RhsSymbolP *rhssymbolp) {
        /* Code For RhsSymbolP Goes Here */

        visitIdent(rhssymbolp->ident_);

    }

    void PCFGRuleParser::visitRhsSymbolA(RhsSymbolA *rhssymbola) {
        /* Code For RhsSymbolA Goes Here */

        visitIdent(rhssymbola->ident_);

    }

    void PCFGRuleParser::visitRhsTerminal(RhsTerminal *rhsterminal) {
        /* Code For RhsTerminal Goes Here */

        visitString(rhsterminal->string_);

    }

    void PCFGRuleParser::visitRhsEpsilon(RhsEpsilon *rhsepsilon) {
        /* Code For RhsEpsilon Goes Here */


    }

    void PCFGRuleParser::visitRhsBr(RhsBr *rhsbr) {
        /* Code For RhsBr Goes Here */

        rhsbr->listbrhs_->accept(this);

    }

    void PCFGRuleParser::visitRhsBrPlus(RhsBrPlus *rhsbrplus) {
        /* Code For RhsBrPlus Goes Here */

        rhsbrplus->listbrhs_->accept(this);

    }

    void PCFGRuleParser::visitRhsBrAst(RhsBrAst *rhsbrast) {
        /* Code For RhsBrAst Goes Here */

        rhsbrast->listbrhs_->accept(this);

    }

    void PCFGRuleParser::visitRhsBrhsS(RhsBrhsS *rhsbrhss) {
        /* Code For RhsBrhsS Goes Here */

        visitIdent(rhsbrhss->ident_);

    }

    void PCFGRuleParser::visitRhsBrhsSP(RhsBrhsSP *rhsbrhssp) {
        /* Code For RhsBrhsSP Goes Here */

        visitIdent(rhsbrhssp->ident_);

    }

    void PCFGRuleParser::visitRhsBrhsSA(RhsBrhsSA *rhsbrhssa) {
        /* Code For RhsBrhsSA Goes Here */

        visitIdent(rhsbrhssa->ident_);

    }

    void PCFGRuleParser::visitRhsBrhsTerminal(RhsBrhsTerminal *rhsbrhsterminal) {
        /* Code For RhsBrhsTerminal Goes Here */

        visitString(rhsbrhsterminal->string_);

    }


    void PCFGRuleParser::visitListRule(ListRule *listrule) {
        for (ListRule::iterator i = listrule->begin(); i != listrule->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void PCFGRuleParser::visitListRHS(ListRHS *listrhs) {
        for (ListRHS::iterator i = listrhs->begin(); i != listrhs->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void PCFGRuleParser::visitListBRHS(ListBRHS *listbrhs) {
        for (ListBRHS::iterator i = listbrhs->begin(); i != listbrhs->end(); ++i) {
            (*i)->accept(this);
        }
    }

    void PCFGRuleParser::visitListDRHS(ListDRHS *listdrhs) {
        for (ListDRHS::iterator i = listdrhs->begin(); i != listdrhs->end(); ++i) {
            (*i)->accept(this);
        }
    }


    void PCFGRuleParser::visitInteger(Integer x) {
        /* Code for Integer Goes Here */
    }

    void PCFGRuleParser::visitChar(Char x) {
        /* Code for Char Goes Here */
    }

    void PCFGRuleParser::visitDouble(Double x) {
        /* Code for Double Goes Here */
    }

    void PCFGRuleParser::visitString(String x) {
        /* Code for String Goes Here */
    }

    void PCFGRuleParser::visitIdent(Ident x) {
        /* Code for Ident Goes Here */
    }

}