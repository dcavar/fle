/**
 * \class XLEConfigParser
 * \file XLEConfigParser.h
 *
 * \brief Provide a parser for XLE CONFIG section settings.
 *
 * The code for this parser is indirectly generated from the specification of the BNF
 * grammar for XLE CONFIG and the resulting parser class Skeleton.C generated by BNFC.
 *
 * \author Damir Cavar &lt;damir.cavar@gmail.com&gt;
 *
 * \version 0.1
 *
 * \date 2016/10/25 01:53:00
 *
 * \date Created on: Tue Oct 25 01:55:00 2016
 *
 * \copyright Copyright 2016 by Damir Cavar
 *
 * \license{Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.}
 *
 * \see XLEConfigParserTest
 *
 * \note This code should be considered alpha.
 *
 * \bug None
 */


#ifndef XLECONFIG_SKELETON_HEADER
#define XLECONFIG_SKELETON_HEADER
/* You might want to change the above name. */


#include <iostream>

#include "Absyn.H"
#include "Parser.H"


using namespace std;
using namespace xleconfig;


class XLEConfigParser : public Visitor {
public:

    XLEConfigParser();

    void visitROOTCAT(ROOTCAT *p);

    void visitSETTINGS(SETTINGS *p);

    void visitAV(AV *p);

    void visitFNAMES(FNAMES *p);

    void visitGRAMVERSION(GRAMVERSION *p);

    void visitENTRIES(ENTRIES *p);

    void visitCATS(CATS *p);

    void visitOPTTOKS(OPTTOKS *p);

    void visitSettings(Settings *p);

    void visitFiles(Files *p);

    void visitOtherFiles(OtherFiles *p);

    void visitFileNameSA(FileNameSA *p);

    void visitFileNameSB(FileNameSB *p);

    void visitFileNameSAP(FileNameSAP *p);

    void visitFileNameSBP(FileNameSBP *p);

    void visitFileNameSAM(FileNameSAM *p);

    void visitFileNameSBM(FileNameSBM *p);

    void visitBaseConfigFile(BaseConfigFile *p);

    void visitPerformanceVarsFile(PerformanceVarsFile *p);

    void visitAGrammarVersion(AGrammarVersion *p);

    void visitGrammarVersion(GrammarVersion *p);

    void visitLexEntries(LexEntries *p);

    void visitRules(Rules *p);

    void visitTemplates(Templates *p);

    void visitMorphology(Morphology *p);

    void visitFeatures(Features *p);

    void visitEntries(Entries *p);

    void visitGovRelations(GovRelations *p);

    void visitCats(Cats *p);

    void visitCatsREQP(CatsREQP *p);

    void visitSemanticFunctions(SemanticFunctions *p);

    void visitNonDistributives(NonDistributives *p);

    void visitEpsilon(Epsilon *p);

    void visitOptimalityOrder(OptimalityOrder *p);

    void visitGenOptimalityOrder(GenOptimalityOrder *p);

    void visitOptTokensNG(OptTokensNG *p);

    void visitOptTokensE(OptTokensE *p);

    void visitOptTokensEA(OptTokensEA *p);

    void visitOptTokensEP(OptTokensEP *p);

    void visitReparseCat(ReparseCat *p);

    void visitListFNAMES(ListFNAMES *p);

    void visitListENTRIES(ListENTRIES *p);

    void visitListCATS(ListCATS *p);

    void visitListOPTTOKS(ListOPTTOKS *p);

    void visitListAV(ListAV *p);

    void visitMyIdent(MyIdent x);

    void visitFileName(FileName x);

    void visitInteger(Integer x);

    void visitChar(Char x);

    void visitDouble(Double x);

    void visitString(String x);

    void visitIdent(Ident x);

    bool verbose;

    void getConfig(const char *);

private:
    // vars
    string file_temp_buffer;                    //Temporary Storage area for literals
    string rootcat;                             //Stores S or ?
    string reparse;                             //Stores reparseCat Value
    string eEpsilon;
    string grammarv;                            //Stores Grammar Version
    vector<string> filenameBuffer;
    vector<string> filename;                 //Stores filenames
    vector<string> otherF;                  //Stores otherfiles
    // vector<string> filem;
    // vector<string> filep;

    vector<string> baseconfig;              //Stores Base Configuration
    vector<string> performFile;             //Stores performancevarsfile values
    vector<string> parseconfig;
    vector<string> morphoVal;               //Stores Morphology values
    vector<string> lex_entry;               //Stores Lexical Entries
    vector<string> featureDesc;             //Stores Features
    vector<string> template_rule;           //Stores template rules
    vector<string> govRel;                  //Stores governable relations
    vector<string> cat;
    vector<string> cat_req;
    vector<string> optional_token;
    vector<string> optional_token_star;
    vector<string> optional_token_plus;
    vector<string> SemanticFunc;            //Stores Semantic Function values
    vector<string> NonDist;                 //Stores Non Distributives
    vector<string> OptOrder;                //Stores the Optimality Order values
    vector<string> GenOptOrder;             //Stores the General Optimality order values
};

#endif
