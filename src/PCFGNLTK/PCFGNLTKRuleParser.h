/**
 * \class PCFGNLTKRuleParser
 * \file PCFGNLTKRuleParser.h
 *
 * \brief Provide a parser for PCFG rules.
 *
 * The code for this parser is indirectly generated from the specification of the BNF
 * grammar for PCFGs and the resulting parser class Skeleton.C generated by BNFC.
 *
 * \author Damir Cavar &lt;damir.cavar@gmail.com&gt;
 *
 * \version 0.1
 *
 * \date 2016/10/25 01:53:00
 *
 * \date Created on: Tue Oct 25 01:55:00 2016
 *
 * \copyright Copyright 2016 by Damir Cavar
 *
 * \license{Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.}
 *
 * \see PCFGNLTKParserTest
 *
 * \note This code should be considered alpha.
 *
 * \bug None
 */


#ifndef GRAMMARTEST_PCFGNLTKRULEPARSER_H
#define GRAMMARTEST_PCFGNLTKRULEPARSER_H


#include <iostream>
#include <vector>
#include <limits.h>
#include "Absyn.H"
#include "Parser.H"
#include "../FLEWFST.h"


using namespace std;

namespace pcfgnltk {

    class PCFGNLTKRuleParser : public Visitor {
    public:
        void visitGrammar(Grammar *p);

        void visitRule(Rule *p);

        void visitLHS(LHS *p);

        void visitProb(Prob *p);

        void visitRHS(RHS *p);

        void visitSYM(SYM *p);

        void visitGram(Gram *p);

        void visitRul(Rul *p);

        void visitERul(ERul *p);

        void visitLhsS(LhsS *p);

        void visitProbS(ProbS *p);

        void visitRhsSymbol(RhsSymbol *p);

        void visitRhsTerminal(RhsTerminal *p);

        void visitSymbol(Symbol *p);

        void visitListRule(ListRule *p);

        void visitListRHS(ListRHS *p);

        void visitListSYM(ListSYM *p);

        void visitTerminal(Terminal x);

        void visitInteger(Integer x);

        void visitChar(Char x);

        void visitDouble(Double x);

        void visitString(String x);

        void visitIdent(Ident x);

        void getRules(const char *str, FLEWFST &newFST);

        bool verbose;

        int count_rules = 0;


    private:
        FLEWFST *myFST;
        /*!< the WFST for the grammar */

        int myLHS;
        /*!< ID of the left-hand-side symbol */

        vector <pair<int, int>> myRHS;
        /*!< vector of the right-hand-side symbol IDs and type */

        int lastState = 0;
        /*!< ID of the last state in myFST */

        bool optionalSymbol = false;

        bool plusBrSymbol = false;

        bool astBrSymbol = false;

    };

}

#endif //GRAMMARTEST_PCFGNLTKRULEPARSER_H
